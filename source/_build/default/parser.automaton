State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On PACKAGE shift to state 1
-- On file shift to state 152
## Reductions:

State 1:
## Known stack suffix:
## PACKAGE
## LR(1) items:
file -> PACKAGE . ident_main SEMICOLON boption(import_fmt) list(decl) EOF [ # ]
## Transitions:
-- On IDENT shift to state 2
-- On ident_main shift to state 3
-- On ident shift to state 151
## Reductions:

State 2:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ VERTICALBARVERTICALBAR STRUCT STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTPAR LEFTBRACE IDENT EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR STRUCT STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTPAR LEFTBRACE IDENT EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production ident -> IDENT

State 3:
## Known stack suffix:
## PACKAGE ident_main
## LR(1) items:
file -> PACKAGE ident_main . SEMICOLON boption(import_fmt) list(decl) EOF [ # ]
## Transitions:
-- On SEMICOLON shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## PACKAGE ident_main SEMICOLON
## LR(1) items:
file -> PACKAGE ident_main SEMICOLON . boption(import_fmt) list(decl) EOF [ # ]
## Transitions:
-- On IMPORT shift to state 5
-- On import_fmt shift to state 8
-- On boption(import_fmt) shift to state 9
## Reductions:
-- On TYPE FUNC EOF
--   reduce production boption(import_fmt) ->

State 5:
## Known stack suffix:
## IMPORT
## LR(1) items:
import_fmt -> IMPORT . STRING SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On STRING shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## IMPORT STRING
## LR(1) items:
import_fmt -> IMPORT STRING . SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On SEMICOLON shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## IMPORT STRING SEMICOLON
## LR(1) items:
import_fmt -> IMPORT STRING SEMICOLON . [ TYPE FUNC EOF ]
## Transitions:
## Reductions:
-- On TYPE FUNC EOF
--   reduce production import_fmt -> IMPORT STRING SEMICOLON

State 8:
## Known stack suffix:
## import_fmt
## LR(1) items:
boption(import_fmt) -> import_fmt . [ TYPE FUNC EOF ]
## Transitions:
## Reductions:
-- On TYPE FUNC EOF
--   reduce production boption(import_fmt) -> import_fmt

State 9:
## Known stack suffix:
## PACKAGE ident_main SEMICOLON boption(import_fmt)
## LR(1) items:
file -> PACKAGE ident_main SEMICOLON boption(import_fmt) . list(decl) EOF [ # ]
## Transitions:
-- On TYPE shift to state 10
-- On FUNC shift to state 30
-- On list(decl) shift to state 147
-- On decl shift to state 149
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 10:
## Known stack suffix:
## TYPE
## LR(1) items:
decl -> TYPE . ident STRUCT LEFTBRACE loption(fields) RIGHTBRACE SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On IDENT shift to state 2
-- On ident shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## TYPE ident
## LR(1) items:
decl -> TYPE ident . STRUCT LEFTBRACE loption(fields) RIGHTBRACE SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On STRUCT shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## TYPE ident STRUCT
## LR(1) items:
decl -> TYPE ident STRUCT . LEFTBRACE loption(fields) RIGHTBRACE SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On LEFTBRACE shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## TYPE ident STRUCT LEFTBRACE
## LR(1) items:
decl -> TYPE ident STRUCT LEFTBRACE . loption(fields) RIGHTBRACE SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On IDENT shift to state 2
-- On separated_nonempty_list(COMMA,ident) shift to state 14
-- On loption(fields) shift to state 19
-- On ids_and_type shift to state 22
-- On ident shift to state 24
-- On fields shift to state 29
## Reductions:
-- On RIGHTBRACE
--   reduce production loption(fields) ->

State 14:
## Known stack suffix:
## separated_nonempty_list(COMMA,ident)
## LR(1) items:
ids_and_type -> separated_nonempty_list(COMMA,ident) . type_expr [ SEMICOLON RIGHTPAR RIGHTBRACE COMMA ]
## Transitions:
-- On STAR shift to state 15
-- On IDENT shift to state 2
-- On type_expr shift to state 18
-- On ident shift to state 17
## Reductions:

State 15:
## Known stack suffix:
## STAR
## LR(1) items:
type_expr -> STAR . type_expr [ SEMICOLON RIGHTPAR RIGHTBRACE LEFTBRACE EQ COMMA ]
## Transitions:
-- On STAR shift to state 15
-- On IDENT shift to state 2
-- On type_expr shift to state 16
-- On ident shift to state 17
## Reductions:

State 16:
## Known stack suffix:
## STAR type_expr
## LR(1) items:
type_expr -> STAR type_expr . [ SEMICOLON RIGHTPAR RIGHTBRACE LEFTBRACE EQ COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTPAR RIGHTBRACE LEFTBRACE EQ COMMA
--   reduce production type_expr -> STAR type_expr

State 17:
## Known stack suffix:
## ident
## LR(1) items:
type_expr -> ident . [ SEMICOLON RIGHTPAR RIGHTBRACE LEFTBRACE EQ COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTPAR RIGHTBRACE LEFTBRACE EQ COMMA
--   reduce production type_expr -> ident

State 18:
## Known stack suffix:
## separated_nonempty_list(COMMA,ident) type_expr
## LR(1) items:
ids_and_type -> separated_nonempty_list(COMMA,ident) type_expr . [ SEMICOLON RIGHTPAR RIGHTBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTPAR RIGHTBRACE COMMA
--   reduce production ids_and_type -> separated_nonempty_list(COMMA,ident) type_expr

State 19:
## Known stack suffix:
## TYPE ident STRUCT LEFTBRACE loption(fields)
## LR(1) items:
decl -> TYPE ident STRUCT LEFTBRACE loption(fields) . RIGHTBRACE SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On RIGHTBRACE shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## TYPE ident STRUCT LEFTBRACE loption(fields) RIGHTBRACE
## LR(1) items:
decl -> TYPE ident STRUCT LEFTBRACE loption(fields) RIGHTBRACE . SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On SEMICOLON shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## TYPE ident STRUCT LEFTBRACE loption(fields) RIGHTBRACE SEMICOLON
## LR(1) items:
decl -> TYPE ident STRUCT LEFTBRACE loption(fields) RIGHTBRACE SEMICOLON . [ TYPE FUNC EOF ]
## Transitions:
## Reductions:
-- On TYPE FUNC EOF
--   reduce production decl -> TYPE ident STRUCT LEFTBRACE loption(fields) RIGHTBRACE SEMICOLON

State 22:
## Known stack suffix:
## ids_and_type
## LR(1) items:
fields -> ids_and_type . option(SEMICOLON) [ RIGHTBRACE ]
fields -> ids_and_type . SEMICOLON fields [ RIGHTBRACE ]
## Transitions:
-- On SEMICOLON shift to state 23
-- On option(SEMICOLON) shift to state 28
## Reductions:
-- On RIGHTBRACE
--   reduce production option(SEMICOLON) ->

State 23:
## Known stack suffix:
## ids_and_type SEMICOLON
## LR(1) items:
fields -> ids_and_type SEMICOLON . fields [ RIGHTBRACE ]
option(SEMICOLON) -> SEMICOLON . [ RIGHTBRACE ]
## Transitions:
-- On IDENT shift to state 2
-- On separated_nonempty_list(COMMA,ident) shift to state 14
-- On ids_and_type shift to state 22
-- On ident shift to state 24
-- On fields shift to state 27
## Reductions:
-- On RIGHTBRACE
--   reduce production option(SEMICOLON) -> SEMICOLON

State 24:
## Known stack suffix:
## ident
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident . [ STAR SEMICOLON RIGHTBRACE IDENT EQ ]
separated_nonempty_list(COMMA,ident) -> ident . COMMA separated_nonempty_list(COMMA,ident) [ STAR SEMICOLON RIGHTBRACE IDENT EQ ]
## Transitions:
-- On COMMA shift to state 25
## Reductions:
-- On STAR SEMICOLON RIGHTBRACE IDENT EQ
--   reduce production separated_nonempty_list(COMMA,ident) -> ident

State 25:
## Known stack suffix:
## ident COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident COMMA . separated_nonempty_list(COMMA,ident) [ STAR SEMICOLON RIGHTBRACE IDENT EQ ]
## Transitions:
-- On IDENT shift to state 2
-- On separated_nonempty_list(COMMA,ident) shift to state 26
-- On ident shift to state 24
## Reductions:

State 26:
## Known stack suffix:
## ident COMMA separated_nonempty_list(COMMA,ident)
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident) . [ STAR SEMICOLON RIGHTBRACE IDENT EQ ]
## Transitions:
## Reductions:
-- On STAR SEMICOLON RIGHTBRACE IDENT EQ
--   reduce production separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident)

State 27:
## Known stack suffix:
## ids_and_type SEMICOLON fields
## LR(1) items:
fields -> ids_and_type SEMICOLON fields . [ RIGHTBRACE ]
## Transitions:
## Reductions:
-- On RIGHTBRACE
--   reduce production fields -> ids_and_type SEMICOLON fields

State 28:
## Known stack suffix:
## ids_and_type option(SEMICOLON)
## LR(1) items:
fields -> ids_and_type option(SEMICOLON) . [ RIGHTBRACE ]
## Transitions:
## Reductions:
-- On RIGHTBRACE
--   reduce production fields -> ids_and_type option(SEMICOLON)

State 29:
## Known stack suffix:
## fields
## LR(1) items:
loption(fields) -> fields . [ RIGHTBRACE ]
## Transitions:
## Reductions:
-- On RIGHTBRACE
--   reduce production loption(fields) -> fields

State 30:
## Known stack suffix:
## FUNC
## LR(1) items:
decl -> FUNC . ident LEFTPAR loption(parameters) RIGHTPAR loption(return_type) block SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On IDENT shift to state 2
-- On ident shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## FUNC ident
## LR(1) items:
decl -> FUNC ident . LEFTPAR loption(parameters) RIGHTPAR loption(return_type) block SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On LEFTPAR shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## FUNC ident LEFTPAR
## LR(1) items:
decl -> FUNC ident LEFTPAR . loption(parameters) RIGHTPAR loption(return_type) block SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On IDENT shift to state 2
-- On separated_nonempty_list(COMMA,ident) shift to state 14
-- On parameters shift to state 33
-- On loption(parameters) shift to state 34
-- On ids_and_type shift to state 143
-- On ident shift to state 24
## Reductions:
-- On RIGHTPAR
--   reduce production loption(parameters) ->

State 33:
## Known stack suffix:
## parameters
## LR(1) items:
loption(parameters) -> parameters . [ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTPAR
--   reduce production loption(parameters) -> parameters

State 34:
## Known stack suffix:
## FUNC ident LEFTPAR loption(parameters)
## LR(1) items:
decl -> FUNC ident LEFTPAR loption(parameters) . RIGHTPAR loption(return_type) block SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On RIGHTPAR shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## FUNC ident LEFTPAR loption(parameters) RIGHTPAR
## LR(1) items:
decl -> FUNC ident LEFTPAR loption(parameters) RIGHTPAR . loption(return_type) block SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On STAR shift to state 15
-- On LEFTPAR shift to state 36
-- On IDENT shift to state 2
-- On type_expr shift to state 43
-- On return_type shift to state 44
-- On loption(return_type) shift to state 45
-- On ident shift to state 17
## Reductions:
-- On LEFTBRACE
--   reduce production loption(return_type) ->

State 36:
## Known stack suffix:
## LEFTPAR
## LR(1) items:
return_type -> LEFTPAR . return_types RIGHTPAR [ LEFTBRACE ]
## Transitions:
-- On STAR shift to state 15
-- On IDENT shift to state 2
-- On type_expr shift to state 37
-- On return_types shift to state 41
-- On ident shift to state 17
## Reductions:

State 37:
## Known stack suffix:
## type_expr
## LR(1) items:
return_types -> type_expr . option(COMMA) [ RIGHTPAR ]
return_types -> type_expr . COMMA return_types [ RIGHTPAR ]
## Transitions:
-- On COMMA shift to state 38
-- On option(COMMA) shift to state 40
## Reductions:
-- On RIGHTPAR
--   reduce production option(COMMA) ->

State 38:
## Known stack suffix:
## type_expr COMMA
## LR(1) items:
option(COMMA) -> COMMA . [ RIGHTPAR ]
return_types -> type_expr COMMA . return_types [ RIGHTPAR ]
## Transitions:
-- On STAR shift to state 15
-- On IDENT shift to state 2
-- On type_expr shift to state 37
-- On return_types shift to state 39
-- On ident shift to state 17
## Reductions:
-- On RIGHTPAR
--   reduce production option(COMMA) -> COMMA

State 39:
## Known stack suffix:
## type_expr COMMA return_types
## LR(1) items:
return_types -> type_expr COMMA return_types . [ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTPAR
--   reduce production return_types -> type_expr COMMA return_types

State 40:
## Known stack suffix:
## type_expr option(COMMA)
## LR(1) items:
return_types -> type_expr option(COMMA) . [ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTPAR
--   reduce production return_types -> type_expr option(COMMA)

State 41:
## Known stack suffix:
## LEFTPAR return_types
## LR(1) items:
return_type -> LEFTPAR return_types . RIGHTPAR [ LEFTBRACE ]
## Transitions:
-- On RIGHTPAR shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## LEFTPAR return_types RIGHTPAR
## LR(1) items:
return_type -> LEFTPAR return_types RIGHTPAR . [ LEFTBRACE ]
## Transitions:
## Reductions:
-- On LEFTBRACE
--   reduce production return_type -> LEFTPAR return_types RIGHTPAR

State 43:
## Known stack suffix:
## type_expr
## LR(1) items:
return_type -> type_expr . [ LEFTBRACE ]
## Transitions:
## Reductions:
-- On LEFTBRACE
--   reduce production return_type -> type_expr

State 44:
## Known stack suffix:
## return_type
## LR(1) items:
loption(return_type) -> return_type . [ LEFTBRACE ]
## Transitions:
## Reductions:
-- On LEFTBRACE
--   reduce production loption(return_type) -> return_type

State 45:
## Known stack suffix:
## FUNC ident LEFTPAR loption(parameters) RIGHTPAR loption(return_type)
## LR(1) items:
decl -> FUNC ident LEFTPAR loption(parameters) RIGHTPAR loption(return_type) . block SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On LEFTBRACE shift to state 46
-- On block shift to state 141
## Reductions:

State 46:
## Known stack suffix:
## LEFTBRACE
## LR(1) items:
block -> LEFTBRACE . RIGHTBRACE [ SEMICOLON RIGHTBRACE ELSE ]
block -> LEFTBRACE . statements RIGHTBRACE [ SEMICOLON RIGHTBRACE ELSE ]
## Transitions:
-- On VAR shift to state 47
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On SEMICOLON shift to state 99
-- On RIGHTBRACE shift to state 138
-- On RETURN shift to state 100
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On LEFTBRACE shift to state 46
-- On IF shift to state 102
-- On IDENT shift to state 2
-- On FOR shift to state 109
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On stmt_desc shift to state 130
-- On stmt shift to state 131
-- On statements shift to state 139
-- On simple_stmt_desc shift to state 110
-- On simple_stmt shift to state 134
-- On separated_nonempty_list(COMMA,expr) shift to state 95
-- On if_stmt_desc shift to state 106
-- On if_stmt shift to state 135
-- On ident shift to state 60
-- On exprs shift to state 118
-- On expr_desc shift to state 65
-- On expr shift to state 123
-- On block shift to state 136
## Reductions:

State 47:
## Known stack suffix:
## VAR
## LR(1) items:
stmt_desc -> VAR . separated_nonempty_list(COMMA,ident) option(type_expr) loption(init) [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On IDENT shift to state 2
-- On separated_nonempty_list(COMMA,ident) shift to state 48
-- On ident shift to state 24
## Reductions:

State 48:
## Known stack suffix:
## VAR separated_nonempty_list(COMMA,ident)
## LR(1) items:
stmt_desc -> VAR separated_nonempty_list(COMMA,ident) . option(type_expr) loption(init) [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On STAR shift to state 15
-- On IDENT shift to state 2
-- On type_expr shift to state 49
-- On option(type_expr) shift to state 50
-- On ident shift to state 17
## Reductions:
-- On SEMICOLON RIGHTBRACE EQ
--   reduce production option(type_expr) ->

State 49:
## Known stack suffix:
## type_expr
## LR(1) items:
option(type_expr) -> type_expr . [ SEMICOLON RIGHTBRACE EQ ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE EQ
--   reduce production option(type_expr) -> type_expr

State 50:
## Known stack suffix:
## VAR separated_nonempty_list(COMMA,ident) option(type_expr)
## LR(1) items:
stmt_desc -> VAR separated_nonempty_list(COMMA,ident) option(type_expr) . loption(init) [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On EQ shift to state 51
-- On loption(init) shift to state 97
-- On init shift to state 98
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production loption(init) ->

State 51:
## Known stack suffix:
## EQ
## LR(1) items:
init -> EQ . exprs [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On separated_nonempty_list(COMMA,expr) shift to state 95
-- On ident shift to state 60
-- On exprs shift to state 96
-- On expr_desc shift to state 65
-- On expr shift to state 66
## Reductions:

State 52:
## Known stack suffix:
## STRING
## LR(1) items:
expr_desc -> STRING . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> STRING

State 53:
## Known stack suffix:
## STAR
## LR(1) items:
expr_desc -> STAR . expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 94
## Reductions:

State 54:
## Known stack suffix:
## NIL
## LR(1) items:
expr_desc -> NIL . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> NIL

State 55:
## Known stack suffix:
## MINUS
## LR(1) items:
expr_desc -> MINUS . expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 93
## Reductions:

State 56:
## Known stack suffix:
## LEFTPAR
## LR(1) items:
expr_desc -> LEFTPAR . expr RIGHTPAR [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 91
## Reductions:

State 57:
## Known stack suffix:
## CST
## LR(1) items:
expr_desc -> CST . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> CST

State 58:
## Known stack suffix:
## BANG
## LR(1) items:
expr_desc -> BANG . expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 90
## Reductions:

State 59:
## Known stack suffix:
## AMP
## LR(1) items:
expr_desc -> AMP . expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 89
## Reductions:

State 60:
## Known stack suffix:
## ident
## LR(1) items:
expr_desc -> ident . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> ident . arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 61
-- On arguments shift to state 88
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> ident

State 61:
## Known stack suffix:
## LEFTPAR
## LR(1) items:
arguments -> LEFTPAR . loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On separated_nonempty_list(COMMA,expr) shift to state 62
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 63
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 66
## Reductions:
-- On RIGHTPAR
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 62:
## Known stack suffix:
## separated_nonempty_list(COMMA,expr)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ SEMICOLON RIGHTPAR RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTPAR RIGHTBRACE
--   reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)

State 63:
## Known stack suffix:
## LEFTPAR loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
arguments -> LEFTPAR loption(separated_nonempty_list(COMMA,expr)) . RIGHTPAR [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR
## LR(1) items:
arguments -> LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production arguments -> LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR

State 65:
## Known stack suffix:
## expr_desc
## LR(1) items:
expr -> expr_desc . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr -> expr_desc

State 66:
## Known stack suffix:
## expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUS PERCENT MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUS PERCENT MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUS PERCENT MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUS PERCENT MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUS PERCENT MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUS PERCENT MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUS PERCENT MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUS PERCENT MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUS PERCENT MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUS PERCENT MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
separated_nonempty_list(COMMA,expr) -> expr . [ SEMICOLON RIGHTPAR RIGHTBRACE LEFTBRACE EQ COLONEQ ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ SEMICOLON RIGHTPAR RIGHTBRACE LEFTBRACE EQ COLONEQ ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 67
-- On STAR shift to state 69
-- On SLASH shift to state 74
-- On PLUS shift to state 76
-- On PERCENT shift to state 78
-- On MINUS shift to state 80
-- On DOT shift to state 71
-- On COMP shift to state 82
-- On COMMA shift to state 86
-- On AMPERSANDAMPERSAND shift to state 84
## Reductions:
-- On SEMICOLON RIGHTPAR RIGHTBRACE LEFTBRACE EQ COLONEQ
--   reduce production separated_nonempty_list(COMMA,expr) -> expr

State 67:
## Known stack suffix:
## expr VERTICALBARVERTICALBAR
## LR(1) items:
expr_desc -> expr VERTICALBARVERTICALBAR . expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## expr VERTICALBARVERTICALBAR expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr VERTICALBARVERTICALBAR expr . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STAR shift to state 69
-- On SLASH shift to state 74
-- On PLUS shift to state 76
-- On PERCENT shift to state 78
-- On MINUS shift to state 80
-- On DOT shift to state 71
-- On COMP shift to state 82
-- On AMPERSANDAMPERSAND shift to state 84
## Reductions:
-- On VERTICALBARVERTICALBAR SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS MINUSMINUS LEFTBRACE EQ COMMA COLONEQ
--   reduce production expr_desc -> expr VERTICALBARVERTICALBAR expr

State 69:
## Known stack suffix:
## expr STAR
## LR(1) items:
expr_desc -> expr STAR . expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## expr STAR expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr STAR expr . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On DOT shift to state 71
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> expr STAR expr

State 71:
## Known stack suffix:
## expr DOT
## LR(1) items:
expr_desc -> expr DOT . ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr DOT . ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On IDENT shift to state 2
-- On ident shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## expr DOT ident
## LR(1) items:
expr_desc -> expr DOT ident . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr DOT ident . arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 61
-- On arguments shift to state 73
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> expr DOT ident

State 73:
## Known stack suffix:
## expr DOT ident arguments
## LR(1) items:
expr_desc -> expr DOT ident arguments . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> expr DOT ident arguments

State 74:
## Known stack suffix:
## expr SLASH
## LR(1) items:
expr_desc -> expr SLASH . expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## expr SLASH expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr SLASH expr . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On DOT shift to state 71
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> expr SLASH expr

State 76:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr_desc -> expr PLUS . expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr PLUS expr . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STAR shift to state 69
-- On SLASH shift to state 74
-- On PERCENT shift to state 78
-- On DOT shift to state 71
## Reductions:
-- On VERTICALBARVERTICALBAR SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS MINUSMINUS MINUS LEFTBRACE EQ COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> expr PLUS expr

State 78:
## Known stack suffix:
## expr PERCENT
## LR(1) items:
expr_desc -> expr PERCENT . expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## expr PERCENT expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr PERCENT expr . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On DOT shift to state 71
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> expr PERCENT expr

State 80:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr_desc -> expr MINUS . expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr MINUS expr . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STAR shift to state 69
-- On SLASH shift to state 74
-- On PERCENT shift to state 78
-- On DOT shift to state 71
## Reductions:
-- On VERTICALBARVERTICALBAR SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS MINUSMINUS MINUS LEFTBRACE EQ COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> expr MINUS expr

State 82:
## Known stack suffix:
## expr COMP
## LR(1) items:
expr_desc -> expr COMP . expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## expr COMP expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr COMP expr . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STAR shift to state 69
-- On SLASH shift to state 74
-- On PLUS shift to state 76
-- On PERCENT shift to state 78
-- On MINUS shift to state 80
-- On DOT shift to state 71
## Reductions:
-- On VERTICALBARVERTICALBAR SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS MINUSMINUS LEFTBRACE EQ COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> expr COMP expr

State 84:
## Known stack suffix:
## expr AMPERSANDAMPERSAND
## LR(1) items:
expr_desc -> expr AMPERSANDAMPERSAND . expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## expr AMPERSANDAMPERSAND expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr AMPERSANDAMPERSAND expr . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On STAR shift to state 69
-- On SLASH shift to state 74
-- On PLUS shift to state 76
-- On PERCENT shift to state 78
-- On MINUS shift to state 80
-- On DOT shift to state 71
-- On COMP shift to state 82
## Reductions:
-- On VERTICALBARVERTICALBAR SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS MINUSMINUS LEFTBRACE EQ COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> expr AMPERSANDAMPERSAND expr

State 86:
## Known stack suffix:
## expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ SEMICOLON RIGHTPAR RIGHTBRACE LEFTBRACE EQ COLONEQ ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On separated_nonempty_list(COMMA,expr) shift to state 87
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 66
## Reductions:

State 87:
## Known stack suffix:
## expr COMMA separated_nonempty_list(COMMA,expr)
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ SEMICOLON RIGHTPAR RIGHTBRACE LEFTBRACE EQ COLONEQ ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTPAR RIGHTBRACE LEFTBRACE EQ COLONEQ
--   reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr)

State 88:
## Known stack suffix:
## ident arguments
## LR(1) items:
expr_desc -> ident arguments . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> ident arguments

State 89:
## Known stack suffix:
## AMP expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> AMP expr . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On DOT shift to state 71
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> AMP expr

State 90:
## Known stack suffix:
## BANG expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> BANG expr . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On DOT shift to state 71
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> BANG expr

State 91:
## Known stack suffix:
## LEFTPAR expr
## LR(1) items:
expr_desc -> LEFTPAR expr . RIGHTPAR [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH RIGHTPAR PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH RIGHTPAR PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH RIGHTPAR PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH RIGHTPAR PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH RIGHTPAR PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH RIGHTPAR PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH RIGHTPAR PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH RIGHTPAR PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH RIGHTPAR PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH RIGHTPAR PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 67
-- On STAR shift to state 69
-- On SLASH shift to state 74
-- On RIGHTPAR shift to state 92
-- On PLUS shift to state 76
-- On PERCENT shift to state 78
-- On MINUS shift to state 80
-- On DOT shift to state 71
-- On COMP shift to state 82
-- On AMPERSANDAMPERSAND shift to state 84
## Reductions:

State 92:
## Known stack suffix:
## LEFTPAR expr RIGHTPAR
## LR(1) items:
expr_desc -> LEFTPAR expr RIGHTPAR . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> LEFTPAR expr RIGHTPAR

State 93:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> MINUS expr . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On DOT shift to state 71
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> MINUS expr

State 94:
## Known stack suffix:
## STAR expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> STAR expr . [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
## Transitions:
-- On DOT shift to state 71
## Reductions:
-- On VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTPAR RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ COMP COMMA COLONEQ AMPERSANDAMPERSAND
--   reduce production expr_desc -> STAR expr

State 95:
## Known stack suffix:
## separated_nonempty_list(COMMA,expr)
## LR(1) items:
exprs -> separated_nonempty_list(COMMA,expr) . [ SEMICOLON RIGHTBRACE LEFTBRACE EQ COLONEQ ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE LEFTBRACE EQ COLONEQ
--   reduce production exprs -> separated_nonempty_list(COMMA,expr)

State 96:
## Known stack suffix:
## EQ exprs
## LR(1) items:
init -> EQ exprs . [ SEMICOLON RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production init -> EQ exprs

State 97:
## Known stack suffix:
## VAR separated_nonempty_list(COMMA,ident) option(type_expr) loption(init)
## LR(1) items:
stmt_desc -> VAR separated_nonempty_list(COMMA,ident) option(type_expr) loption(init) . [ SEMICOLON RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production stmt_desc -> VAR separated_nonempty_list(COMMA,ident) option(type_expr) loption(init)

State 98:
## Known stack suffix:
## init
## LR(1) items:
loption(init) -> init . [ SEMICOLON RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production loption(init) -> init

State 99:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
statements -> SEMICOLON . statements [ RIGHTBRACE ]
statements -> SEMICOLON . [ RIGHTBRACE ]
## Transitions:
-- On VAR shift to state 47
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On SEMICOLON shift to state 99
-- On RETURN shift to state 100
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On LEFTBRACE shift to state 46
-- On IF shift to state 102
-- On IDENT shift to state 2
-- On FOR shift to state 109
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On stmt_desc shift to state 130
-- On stmt shift to state 131
-- On statements shift to state 137
-- On simple_stmt_desc shift to state 110
-- On simple_stmt shift to state 134
-- On separated_nonempty_list(COMMA,expr) shift to state 95
-- On if_stmt_desc shift to state 106
-- On if_stmt shift to state 135
-- On ident shift to state 60
-- On exprs shift to state 118
-- On expr_desc shift to state 65
-- On expr shift to state 123
-- On block shift to state 136
## Reductions:
-- On RIGHTBRACE
--   reduce production statements -> SEMICOLON

State 100:
## Known stack suffix:
## RETURN
## LR(1) items:
stmt_desc -> RETURN . loption(separated_nonempty_list(COMMA,expr)) [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On separated_nonempty_list(COMMA,expr) shift to state 62
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 101
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 66
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 101:
## Known stack suffix:
## RETURN loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
stmt_desc -> RETURN loption(separated_nonempty_list(COMMA,expr)) . [ SEMICOLON RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production stmt_desc -> RETURN loption(separated_nonempty_list(COMMA,expr))

State 102:
## Known stack suffix:
## IF
## LR(1) items:
if_stmt_desc -> IF . expr block [ SEMICOLON RIGHTBRACE ]
if_stmt_desc -> IF . expr block ELSE if_stmt [ SEMICOLON RIGHTBRACE ]
if_stmt_desc -> IF . expr block ELSE block [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## IF expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH PLUS PERCENT MINUS LEFTBRACE DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH PLUS PERCENT MINUS LEFTBRACE DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH PLUS PERCENT MINUS LEFTBRACE DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH PLUS PERCENT MINUS LEFTBRACE DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH PLUS PERCENT MINUS LEFTBRACE DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH PLUS PERCENT MINUS LEFTBRACE DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH PLUS PERCENT MINUS LEFTBRACE DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH PLUS PERCENT MINUS LEFTBRACE DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH PLUS PERCENT MINUS LEFTBRACE DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH PLUS PERCENT MINUS LEFTBRACE DOT COMP AMPERSANDAMPERSAND ]
if_stmt_desc -> IF expr . block [ SEMICOLON RIGHTBRACE ]
if_stmt_desc -> IF expr . block ELSE if_stmt [ SEMICOLON RIGHTBRACE ]
if_stmt_desc -> IF expr . block ELSE block [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 67
-- On STAR shift to state 69
-- On SLASH shift to state 74
-- On PLUS shift to state 76
-- On PERCENT shift to state 78
-- On MINUS shift to state 80
-- On LEFTBRACE shift to state 46
-- On DOT shift to state 71
-- On COMP shift to state 82
-- On AMPERSANDAMPERSAND shift to state 84
-- On block shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## IF expr block
## LR(1) items:
if_stmt_desc -> IF expr block . [ SEMICOLON RIGHTBRACE ]
if_stmt_desc -> IF expr block . ELSE if_stmt [ SEMICOLON RIGHTBRACE ]
if_stmt_desc -> IF expr block . ELSE block [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On ELSE shift to state 105
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production if_stmt_desc -> IF expr block

State 105:
## Known stack suffix:
## IF expr block ELSE
## LR(1) items:
if_stmt_desc -> IF expr block ELSE . if_stmt [ SEMICOLON RIGHTBRACE ]
if_stmt_desc -> IF expr block ELSE . block [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On LEFTBRACE shift to state 46
-- On IF shift to state 102
-- On if_stmt_desc shift to state 106
-- On if_stmt shift to state 107
-- On block shift to state 108
## Reductions:

State 106:
## Known stack suffix:
## if_stmt_desc
## LR(1) items:
if_stmt -> if_stmt_desc . [ SEMICOLON RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production if_stmt -> if_stmt_desc

State 107:
## Known stack suffix:
## IF expr block ELSE if_stmt
## LR(1) items:
if_stmt_desc -> IF expr block ELSE if_stmt . [ SEMICOLON RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production if_stmt_desc -> IF expr block ELSE if_stmt

State 108:
## Known stack suffix:
## IF expr block ELSE block
## LR(1) items:
if_stmt_desc -> IF expr block ELSE block . [ SEMICOLON RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production if_stmt_desc -> IF expr block ELSE block

State 109:
## Known stack suffix:
## FOR
## LR(1) items:
stmt_desc -> FOR . block [ SEMICOLON RIGHTBRACE ]
stmt_desc -> FOR . expr block [ SEMICOLON RIGHTBRACE ]
stmt_desc -> FOR . opt_simple_stmt SEMICOLON expr SEMICOLON opt_simple_stmt block [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On LEFTBRACE shift to state 46
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On simple_stmt_desc shift to state 110
-- On simple_stmt shift to state 111
-- On separated_nonempty_list(COMMA,expr) shift to state 95
-- On opt_simple_stmt shift to state 112
-- On ident shift to state 60
-- On exprs shift to state 118
-- On expr_desc shift to state 65
-- On expr shift to state 127
-- On block shift to state 129
## Reductions:
-- On SEMICOLON
--   reduce production opt_simple_stmt ->

State 110:
## Known stack suffix:
## simple_stmt_desc
## LR(1) items:
simple_stmt -> simple_stmt_desc . [ SEMICOLON RIGHTBRACE LEFTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE LEFTBRACE
--   reduce production simple_stmt -> simple_stmt_desc

State 111:
## Known stack suffix:
## simple_stmt
## LR(1) items:
opt_simple_stmt -> simple_stmt . [ SEMICOLON LEFTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON LEFTBRACE
--   reduce production opt_simple_stmt -> simple_stmt

State 112:
## Known stack suffix:
## FOR opt_simple_stmt
## LR(1) items:
stmt_desc -> FOR opt_simple_stmt . SEMICOLON expr SEMICOLON opt_simple_stmt block [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On SEMICOLON shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## FOR opt_simple_stmt SEMICOLON
## LR(1) items:
stmt_desc -> FOR opt_simple_stmt SEMICOLON . expr SEMICOLON opt_simple_stmt block [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On ident shift to state 60
-- On expr_desc shift to state 65
-- On expr shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## FOR opt_simple_stmt SEMICOLON expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUS PERCENT MINUS DOT COMP AMPERSANDAMPERSAND ]
stmt_desc -> FOR opt_simple_stmt SEMICOLON expr . SEMICOLON opt_simple_stmt block [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 67
-- On STAR shift to state 69
-- On SLASH shift to state 74
-- On SEMICOLON shift to state 115
-- On PLUS shift to state 76
-- On PERCENT shift to state 78
-- On MINUS shift to state 80
-- On DOT shift to state 71
-- On COMP shift to state 82
-- On AMPERSANDAMPERSAND shift to state 84
## Reductions:

State 115:
## Known stack suffix:
## FOR opt_simple_stmt SEMICOLON expr SEMICOLON
## LR(1) items:
stmt_desc -> FOR opt_simple_stmt SEMICOLON expr SEMICOLON . opt_simple_stmt block [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On simple_stmt_desc shift to state 110
-- On simple_stmt shift to state 111
-- On separated_nonempty_list(COMMA,expr) shift to state 95
-- On opt_simple_stmt shift to state 116
-- On ident shift to state 60
-- On exprs shift to state 118
-- On expr_desc shift to state 65
-- On expr shift to state 123
## Reductions:
-- On LEFTBRACE
--   reduce production opt_simple_stmt ->

State 116:
## Known stack suffix:
## FOR opt_simple_stmt SEMICOLON expr SEMICOLON opt_simple_stmt
## LR(1) items:
stmt_desc -> FOR opt_simple_stmt SEMICOLON expr SEMICOLON opt_simple_stmt . block [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On LEFTBRACE shift to state 46
-- On block shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## FOR opt_simple_stmt SEMICOLON expr SEMICOLON opt_simple_stmt block
## LR(1) items:
stmt_desc -> FOR opt_simple_stmt SEMICOLON expr SEMICOLON opt_simple_stmt block . [ SEMICOLON RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production stmt_desc -> FOR opt_simple_stmt SEMICOLON expr SEMICOLON opt_simple_stmt block

State 118:
## Known stack suffix:
## exprs
## LR(1) items:
simple_stmt_desc -> exprs . EQ exprs [ SEMICOLON RIGHTBRACE LEFTBRACE ]
simple_stmt_desc -> exprs . COLONEQ exprs [ SEMICOLON RIGHTBRACE LEFTBRACE ]
## Transitions:
-- On EQ shift to state 119
-- On COLONEQ shift to state 121
## Reductions:

State 119:
## Known stack suffix:
## exprs EQ
## LR(1) items:
simple_stmt_desc -> exprs EQ . exprs [ SEMICOLON RIGHTBRACE LEFTBRACE ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On separated_nonempty_list(COMMA,expr) shift to state 95
-- On ident shift to state 60
-- On exprs shift to state 120
-- On expr_desc shift to state 65
-- On expr shift to state 66
## Reductions:

State 120:
## Known stack suffix:
## exprs EQ exprs
## LR(1) items:
simple_stmt_desc -> exprs EQ exprs . [ SEMICOLON RIGHTBRACE LEFTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE LEFTBRACE
--   reduce production simple_stmt_desc -> exprs EQ exprs

State 121:
## Known stack suffix:
## exprs COLONEQ
## LR(1) items:
simple_stmt_desc -> exprs COLONEQ . exprs [ SEMICOLON RIGHTBRACE LEFTBRACE ]
## Transitions:
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On IDENT shift to state 2
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On separated_nonempty_list(COMMA,expr) shift to state 95
-- On ident shift to state 60
-- On exprs shift to state 122
-- On expr_desc shift to state 65
-- On expr shift to state 66
## Reductions:

State 122:
## Known stack suffix:
## exprs COLONEQ exprs
## LR(1) items:
simple_stmt_desc -> exprs COLONEQ exprs . [ SEMICOLON RIGHTBRACE LEFTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE LEFTBRACE
--   reduce production simple_stmt_desc -> exprs COLONEQ exprs

State 123:
## Known stack suffix:
## expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON RIGHTBRACE PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
separated_nonempty_list(COMMA,expr) -> expr . [ EQ COLONEQ ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ EQ COLONEQ ]
simple_stmt -> expr . [ SEMICOLON RIGHTBRACE LEFTBRACE ]
simple_stmt_desc -> expr . incdec [ SEMICOLON RIGHTBRACE LEFTBRACE ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 67
-- On STAR shift to state 69
-- On SLASH shift to state 74
-- On PLUSPLUS shift to state 124
-- On PLUS shift to state 76
-- On PERCENT shift to state 78
-- On MINUSMINUS shift to state 125
-- On MINUS shift to state 80
-- On DOT shift to state 71
-- On COMP shift to state 82
-- On COMMA shift to state 86
-- On AMPERSANDAMPERSAND shift to state 84
-- On incdec shift to state 126
## Reductions:
-- On EQ COLONEQ
--   reduce production separated_nonempty_list(COMMA,expr) -> expr
-- On SEMICOLON RIGHTBRACE LEFTBRACE
--   reduce production simple_stmt -> expr

State 124:
## Known stack suffix:
## PLUSPLUS
## LR(1) items:
incdec -> PLUSPLUS . [ SEMICOLON RIGHTBRACE LEFTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE LEFTBRACE
--   reduce production incdec -> PLUSPLUS

State 125:
## Known stack suffix:
## MINUSMINUS
## LR(1) items:
incdec -> MINUSMINUS . [ SEMICOLON RIGHTBRACE LEFTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE LEFTBRACE
--   reduce production incdec -> MINUSMINUS

State 126:
## Known stack suffix:
## expr incdec
## LR(1) items:
simple_stmt_desc -> expr incdec . [ SEMICOLON RIGHTBRACE LEFTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE LEFTBRACE
--   reduce production simple_stmt_desc -> expr incdec

State 127:
## Known stack suffix:
## FOR expr
## LR(1) items:
expr_desc -> expr . DOT ident [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . DOT ident arguments [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PLUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . MINUS expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . STAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . SLASH expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . PERCENT expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . COMP expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
expr_desc -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR STAR SLASH SEMICOLON PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACE EQ DOT COMP COMMA COLONEQ AMPERSANDAMPERSAND ]
separated_nonempty_list(COMMA,expr) -> expr . [ EQ COLONEQ ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ EQ COLONEQ ]
simple_stmt -> expr . [ SEMICOLON ]
simple_stmt_desc -> expr . incdec [ SEMICOLON ]
stmt_desc -> FOR expr . block [ SEMICOLON RIGHTBRACE ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 67
-- On STAR shift to state 69
-- On SLASH shift to state 74
-- On PLUSPLUS shift to state 124
-- On PLUS shift to state 76
-- On PERCENT shift to state 78
-- On MINUSMINUS shift to state 125
-- On MINUS shift to state 80
-- On LEFTBRACE shift to state 46
-- On DOT shift to state 71
-- On COMP shift to state 82
-- On COMMA shift to state 86
-- On AMPERSANDAMPERSAND shift to state 84
-- On incdec shift to state 126
-- On block shift to state 128
## Reductions:
-- On EQ COLONEQ
--   reduce production separated_nonempty_list(COMMA,expr) -> expr
-- On SEMICOLON
--   reduce production simple_stmt -> expr

State 128:
## Known stack suffix:
## FOR expr block
## LR(1) items:
stmt_desc -> FOR expr block . [ SEMICOLON RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production stmt_desc -> FOR expr block

State 129:
## Known stack suffix:
## FOR block
## LR(1) items:
stmt_desc -> FOR block . [ SEMICOLON RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production stmt_desc -> FOR block

State 130:
## Known stack suffix:
## stmt_desc
## LR(1) items:
stmt -> stmt_desc . [ SEMICOLON RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production stmt -> stmt_desc

State 131:
## Known stack suffix:
## stmt
## LR(1) items:
statements -> stmt . [ RIGHTBRACE ]
statements -> stmt . SEMICOLON [ RIGHTBRACE ]
statements -> stmt . SEMICOLON statements [ RIGHTBRACE ]
## Transitions:
-- On SEMICOLON shift to state 132
## Reductions:
-- On RIGHTBRACE
--   reduce production statements -> stmt

State 132:
## Known stack suffix:
## stmt SEMICOLON
## LR(1) items:
statements -> stmt SEMICOLON . [ RIGHTBRACE ]
statements -> stmt SEMICOLON . statements [ RIGHTBRACE ]
## Transitions:
-- On VAR shift to state 47
-- On STRING shift to state 52
-- On STAR shift to state 53
-- On SEMICOLON shift to state 99
-- On RETURN shift to state 100
-- On NIL shift to state 54
-- On MINUS shift to state 55
-- On LEFTPAR shift to state 56
-- On LEFTBRACE shift to state 46
-- On IF shift to state 102
-- On IDENT shift to state 2
-- On FOR shift to state 109
-- On CST shift to state 57
-- On BANG shift to state 58
-- On AMP shift to state 59
-- On stmt_desc shift to state 130
-- On stmt shift to state 131
-- On statements shift to state 133
-- On simple_stmt_desc shift to state 110
-- On simple_stmt shift to state 134
-- On separated_nonempty_list(COMMA,expr) shift to state 95
-- On if_stmt_desc shift to state 106
-- On if_stmt shift to state 135
-- On ident shift to state 60
-- On exprs shift to state 118
-- On expr_desc shift to state 65
-- On expr shift to state 123
-- On block shift to state 136
## Reductions:
-- On RIGHTBRACE
--   reduce production statements -> stmt SEMICOLON

State 133:
## Known stack suffix:
## stmt SEMICOLON statements
## LR(1) items:
statements -> stmt SEMICOLON statements . [ RIGHTBRACE ]
## Transitions:
## Reductions:
-- On RIGHTBRACE
--   reduce production statements -> stmt SEMICOLON statements

State 134:
## Known stack suffix:
## simple_stmt
## LR(1) items:
stmt -> simple_stmt . [ SEMICOLON RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production stmt -> simple_stmt

State 135:
## Known stack suffix:
## if_stmt
## LR(1) items:
stmt -> if_stmt . [ SEMICOLON RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production stmt -> if_stmt

State 136:
## Known stack suffix:
## block
## LR(1) items:
stmt -> block . [ SEMICOLON RIGHTBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE
--   reduce production stmt -> block

State 137:
## Known stack suffix:
## SEMICOLON statements
## LR(1) items:
statements -> SEMICOLON statements . [ RIGHTBRACE ]
## Transitions:
## Reductions:
-- On RIGHTBRACE
--   reduce production statements -> SEMICOLON statements

State 138:
## Known stack suffix:
## LEFTBRACE RIGHTBRACE
## LR(1) items:
block -> LEFTBRACE RIGHTBRACE . [ SEMICOLON RIGHTBRACE ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE ELSE
--   reduce production block -> LEFTBRACE RIGHTBRACE

State 139:
## Known stack suffix:
## LEFTBRACE statements
## LR(1) items:
block -> LEFTBRACE statements . RIGHTBRACE [ SEMICOLON RIGHTBRACE ELSE ]
## Transitions:
-- On RIGHTBRACE shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## LEFTBRACE statements RIGHTBRACE
## LR(1) items:
block -> LEFTBRACE statements RIGHTBRACE . [ SEMICOLON RIGHTBRACE ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON RIGHTBRACE ELSE
--   reduce production block -> LEFTBRACE statements RIGHTBRACE

State 141:
## Known stack suffix:
## FUNC ident LEFTPAR loption(parameters) RIGHTPAR loption(return_type) block
## LR(1) items:
decl -> FUNC ident LEFTPAR loption(parameters) RIGHTPAR loption(return_type) block . SEMICOLON [ TYPE FUNC EOF ]
## Transitions:
-- On SEMICOLON shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## FUNC ident LEFTPAR loption(parameters) RIGHTPAR loption(return_type) block SEMICOLON
## LR(1) items:
decl -> FUNC ident LEFTPAR loption(parameters) RIGHTPAR loption(return_type) block SEMICOLON . [ TYPE FUNC EOF ]
## Transitions:
## Reductions:
-- On TYPE FUNC EOF
--   reduce production decl -> FUNC ident LEFTPAR loption(parameters) RIGHTPAR loption(return_type) block SEMICOLON

State 143:
## Known stack suffix:
## ids_and_type
## LR(1) items:
parameters -> ids_and_type . option(COMMA) [ RIGHTPAR ]
parameters -> ids_and_type . COMMA parameters [ RIGHTPAR ]
## Transitions:
-- On COMMA shift to state 144
-- On option(COMMA) shift to state 146
## Reductions:
-- On RIGHTPAR
--   reduce production option(COMMA) ->

State 144:
## Known stack suffix:
## ids_and_type COMMA
## LR(1) items:
option(COMMA) -> COMMA . [ RIGHTPAR ]
parameters -> ids_and_type COMMA . parameters [ RIGHTPAR ]
## Transitions:
-- On IDENT shift to state 2
-- On separated_nonempty_list(COMMA,ident) shift to state 14
-- On parameters shift to state 145
-- On ids_and_type shift to state 143
-- On ident shift to state 24
## Reductions:
-- On RIGHTPAR
--   reduce production option(COMMA) -> COMMA

State 145:
## Known stack suffix:
## ids_and_type COMMA parameters
## LR(1) items:
parameters -> ids_and_type COMMA parameters . [ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTPAR
--   reduce production parameters -> ids_and_type COMMA parameters

State 146:
## Known stack suffix:
## ids_and_type option(COMMA)
## LR(1) items:
parameters -> ids_and_type option(COMMA) . [ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTPAR
--   reduce production parameters -> ids_and_type option(COMMA)

State 147:
## Known stack suffix:
## PACKAGE ident_main SEMICOLON boption(import_fmt) list(decl)
## LR(1) items:
file -> PACKAGE ident_main SEMICOLON boption(import_fmt) list(decl) . EOF [ # ]
## Transitions:
-- On EOF shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## PACKAGE ident_main SEMICOLON boption(import_fmt) list(decl) EOF
## LR(1) items:
file -> PACKAGE ident_main SEMICOLON boption(import_fmt) list(decl) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production file -> PACKAGE ident_main SEMICOLON boption(import_fmt) list(decl) EOF

State 149:
## Known stack suffix:
## decl
## LR(1) items:
list(decl) -> decl . list(decl) [ EOF ]
## Transitions:
-- On TYPE shift to state 10
-- On FUNC shift to state 30
-- On list(decl) shift to state 150
-- On decl shift to state 149
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 150:
## Known stack suffix:
## decl list(decl)
## LR(1) items:
list(decl) -> decl list(decl) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(decl) -> decl list(decl)

State 151:
## Known stack suffix:
## ident
## LR(1) items:
ident_main -> ident . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production ident_main -> ident

State 152:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept file

